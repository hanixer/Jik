; (define %all-symbols-list '())

; (define (display x) x)
; (define (newline) 1)
; (define (empty? x) (null? x))
; (define (error . x) x)

; (define string->symbol
;     (lambda (str)
;         (unless (string? str)
;             (error "string->symbol: not a string given!"))
;         (let loop ([ls %all-symbols-list])
;             (if (empty? ls)
;                 (let ([created (make-symbol str)])
;                   (set! %all-symbols-list (cons created %all-symbols-list))
;                   (display %all-symbols-list)
;                   (newline)
;                   created)
;                 (let ([h (car ls)])
;                     (unless (symbol? h)
;                         (error "head is not a symbol" ls))
;                     (if (string=? (symbol-string (car ls)) str)
;                         (car ls)
;                         (loop (cdr ls))))))))

; (define symbol->string
;     (lambda (s)
;         (unless (symbol? s)
;             (error "symbol->string: not a symbol"))
;         (symbol-string s)))

(symbol-string (car (cons (make-symbol "onetwo")
(cons (make-symbol "onetwo2")
; (cons (make-symbol "onetwo3")
; (cons (make-symbol "onetwo4")
; (cons (make-symbol "onetwo5")
; (cons (make-symbol "onetwo6")
; (cons (make-symbol "onetwo7")
    '()))))